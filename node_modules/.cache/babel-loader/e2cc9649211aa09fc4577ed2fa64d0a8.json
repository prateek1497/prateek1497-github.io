{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/prateek/Documents/Assignments/orbihealth-assignment/src/components/DisplayTable.js\";\nimport React, { Component } from 'react';\nimport MUIDataTable from \"mui-datatables\";\n\nclass DisplayTable extends Component {\n  calculateCompoundedIR(principalAmount, yearValue, interestRate) {\n    // Final Amount = A(1+R/100)^t\n    let rate = 1 + interestRate / 100;\n    return principalAmount * Math.pow(rate, yearValue);\n  }\n\n  render() {\n    const options = {\n      filterType: \"checkbox\"\n    };\n    const columns = [{\n      name: \"year\",\n      label: \"Year\"\n    }, {\n      name: \"loanAmount\",\n      label: \"Loan Amount\"\n    }, {\n      name: \"openingBalance\",\n      label: \"Opening Balance\"\n    }, {\n      name: \"monthlyEMI\",\n      label: \"EMI *12\"\n    }, {\n      name: \"closingBalance\",\n      label: \"Closing Balance\"\n    }];\n    const data = [{\n      name: \"Joe James\",\n      company: \"Test Corp\",\n      city: \"Yonkers\",\n      state: \"NY\"\n    }, {\n      name: \"John Walsh\",\n      company: \"Test Corp\",\n      city: \"Hartford\",\n      state: \"CT\"\n    }, {\n      name: \"Bob Herm\",\n      company: \"Test Corp\",\n      city: \"Tampa\",\n      state: \"FL\"\n    }, {\n      name: \"James Houston\",\n      company: \"Test Corp\",\n      city: \"Dallas\",\n      state: \"TX\"\n    }];\n    const {\n      loanAmount,\n      interestRate,\n      yearValue\n    } = this.props;\n    const arr = []; // arr[0] = {\n    //     index : 'Year',\n    //     loanAmount : 'Loan Amount',\n    //     openingBalance : 'OpeningBalance',\n    //     interestPaid: 'Interest Paid',\n    //     principalPaid: 'Principal Paid',\n    //     closingBalance: 'Closing Balance'\n    // }\n\n    let openingBalance = loanAmount;\n    let interestPaid = loanAmount * interestRate / 100;\n    let finalAmount = this.calculateCompoundedIR(loanAmount, yearValue, interestRate);\n    let monthlyEMI = finalAmount / yearValue / 12;\n    monthlyEMI = Math.trunc(monthlyEMI);\n    let closingBalance = openingBalance - interestPaid;\n\n    for (let i = 0; i < yearValue && closingBalance >= 0; i++) {\n      openingBalance = loanAmount - monthlyEMI * 12 * (i + 1);\n      closingBalance = openingBalance - interestPaid;\n      arr.push({\n        year: i + 1,\n        loanAmount,\n        openingBalance,\n        monthlyEMI: monthlyEMI * 12,\n        closingBalance: openingBalance - monthlyEMI * 12\n      });\n      openingBalance = closingBalance;\n    }\n\n    return /*#__PURE__*/_jsxDEV(MUIDataTable, {\n      title: \"Amortization Schedule\",\n      data: arr,\n      columns: columns,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default DisplayTable;","map":{"version":3,"sources":["/home/prateek/Documents/Assignments/orbihealth-assignment/src/components/DisplayTable.js"],"names":["React","Component","MUIDataTable","DisplayTable","calculateCompoundedIR","principalAmount","yearValue","interestRate","rate","Math","pow","render","options","filterType","columns","name","label","data","company","city","state","loanAmount","props","arr","openingBalance","interestPaid","finalAmount","monthlyEMI","trunc","closingBalance","i","push","year"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport MUIDataTable from \"mui-datatables\";\n\n class DisplayTable extends Component {\n  calculateCompoundedIR(principalAmount, yearValue, interestRate){\n\n    // Final Amount = A(1+R/100)^t\n    let rate=(1+interestRate/100)\n    return principalAmount * Math.pow(rate,yearValue)\n}\n    render() {\n\n        const options = {\n            filterType: \"checkbox\",\n          };\n\n          const columns = [\n            {\n              name: \"year\",\n              label: \"Year\",\n              \n            },\n            {\n              name: \"loanAmount\",\n              label: \"Loan Amount\",\n              \n            },\n            \n            {\n              name: \"openingBalance\",\n              label: \"Opening Balance\",\n             \n            },\n            {\n              name: \"monthlyEMI\",\n              label: \"EMI *12\"\n            },\n            {\n              name: \"closingBalance\",\n              label: \"Closing Balance\",\n              \n            },\n          ];\n\n          const data = [\n            {\n              name: \"Joe James\",\n              company: \"Test Corp\",\n              city: \"Yonkers\",\n              state: \"NY\",\n            },\n            {\n              name: \"John Walsh\",\n              company: \"Test Corp\",\n              city: \"Hartford\",\n              state: \"CT\",\n            },\n            {\n              name: \"Bob Herm\",\n              company: \"Test Corp\",\n              city: \"Tampa\",\n              state: \"FL\",\n            },\n            {\n              name: \"James Houston\",\n              company: \"Test Corp\",\n              city: \"Dallas\",\n              state: \"TX\",\n            },\n          ];\n        \n        const {loanAmount, interestRate, yearValue} = this.props\n        const arr = []\n        // arr[0] = {\n        //     index : 'Year',\n        //     loanAmount : 'Loan Amount',\n        //     openingBalance : 'OpeningBalance',\n        //     interestPaid: 'Interest Paid',\n        //     principalPaid: 'Principal Paid',\n        //     closingBalance: 'Closing Balance'\n        // }\n        let openingBalance = loanAmount;\n        let interestPaid = loanAmount * interestRate/100;\n        let finalAmount = this.calculateCompoundedIR(loanAmount, yearValue,interestRate)\n        let monthlyEMI = finalAmount/yearValue/12\n        monthlyEMI = Math.trunc(monthlyEMI)\n        let closingBalance = openingBalance - interestPaid;\n\n        for(let i=0; i<yearValue && closingBalance>=0 ;i++){\n          openingBalance = loanAmount - monthlyEMI * 12 * (i+1)\n           closingBalance = openingBalance - interestPaid;\n         \n            arr.push({\n              year: i+1,\n              loanAmount,\n              openingBalance,\n              monthlyEMI: monthlyEMI *12,\n              closingBalance: openingBalance - monthlyEMI*12\n            })\n            openingBalance = closingBalance\n        }\n\n\n        return (\n            <MUIDataTable\n                title={\"Amortization Schedule\"}\n                data={arr}\n                columns={columns}\n                options={options}\n                />\n        )\n    }\n}\n\nexport default DisplayTable\n"]},"metadata":{},"sourceType":"module"}